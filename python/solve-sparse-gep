#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# Copyright 2016 Christoph Conrads
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import dcgeig
import dcgeig.error_analysis as error_analysis
import dcgeig.solver as solver
import dcgeig.sparse_tools as sparse_tools
import dcgeig.utils as utils
from dcgeig.options import Options

import numpy as NP
import numpy.random

import scipy.sparse as SS
import scipy.sparse.linalg as LA

import scipy.io as IO

import argparse

import copy

import sys
import os.path as OP

import time



def check_if_positive_integer(string):
    i = int(string)
    if (i <= 0):
        msg = '{0} is an invalid positive integer value'
        raise argparse.ArgumentTypeError(msg.format(string))

    return i



def check_if_positive_real(string):
    f = float(string)
    if (f <= 0) or NP.isnan(f) or NP.isinf(f):
        msg = '{0} is an invalid positive real value'
        raise argparse.ArgumentTypeError(msg.format(string))

    return f



def check_if_nonnegative_real(string):
    f = float(string)
    if (f < 0) or NP.isnan(f) or NP.isinf(f):
        msg = '{0} is an invalid non-negative real value'
        raise argparse.ArgumentTypeError(msg.format(string))

    return f



def make_argument_parser(default_options):
    description = \
        'This program estimates the number of eigenvalues of a Hermitian \
        semidefinite GEP.'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s {0}'.format(dcgeig.__version__))

    parser.add_argument(
        'file',
        type=str,
        help='path to the file containing the stiffness matrix in Matrix Market format')

    parser.add_argument(
        'cutoff',
        type=check_if_positive_real,
        help='the largest desired eigenvalue')


    parser.add_argument(
        '-n', '--max-dim-direct-solve',
        metavar='n_direct',
        default=default_options.n_direct,
        type=check_if_positive_integer,
        help='maximum dimension for direct GEP solves')

    parser.add_argument(
        '-t', '--tolerance',
        metavar='tol',
        default=default_options.eta_max,
        type=check_if_positive_real,
        help='maximum backward error')


    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='only print one line of solution information')

    return parser



def normalize_path(filename):
    assert isinstance(filename, str)

    path = OP.expanduser(filename)
    abs_path = path if OP.isabs(path) else OP.abspath(path)

    return abs_path



def sanitize_matrix_pencil(K, M):
    if not utils.is_hermitian(K):
        raise ValueError('K must be Hermitian')
    if not SS.isspmatrix(K):
        raise ValueError('K must be sparse')

    if not utils.is_hermitian(M):
        raise ValueError('M must be Hermitian')
    if not SS.isspmatrix(M):
        raise ValueError('K must be sparse')

    if K.shape[0] != M.shape[0]:
        raise ValueError('Matrices must have the same dimension')

    A = SS.csc_matrix(K)
    B = SS.csc_matrix(M)

    return A, B



def sanitize_input(options, user_options):
    def print_message(message):
        print message


    options.lambda_c = user_options.cutoff
    options.k_path = normalize_path( user_options.file )
    options.n_direct = user_options.max_dim_direct_solve
    options.eta_max = user_options.tolerance
    options.be_quiet = user_options.quiet
    options.show = options.show if options.be_quiet else print_message


    # backward error
    if not NP.isfinite(user_options.tolerance) or user_options.tolerance >= 1:
        raise ValueError('tolerance must be between zero and one')


    # get stiffness matrix
    k_path = options.k_path
    K = IO.mmread(k_path)


    # get mass matrix
    M = SS.identity(K.shape[0], dtype=K.dtype)
    options.m_path = None

    k_dirname = OP.dirname(k_path)
    k_basename = OP.basename(k_path)
    assert k_basename != ''
    options.filename = k_basename

    if str.count(k_basename, 'k') == 1:
        m_basename = str.replace(k_basename, 'k', 'm')
        m_path = OP.join(k_dirname, m_basename)

        try:
            M = IO.mmread(m_path).astype(K.dtype)
            options.m_path = m_path
        except IOError as e:
            if e.errno != 2:
                raise

    assert K.dtype == M.dtype


    A, B = sanitize_matrix_pencil(K, M)

    return options, A, B



def extract_key_quantities(lambda_c, rs, labels):
    get_d = lambda r: r[0]
    get_X = lambda r: r[1]
    get_eta = lambda r: r[2]
    get_delta = lambda r: r[3]

    make_list = lambda f: NP.concatenate(map(f, rs))

    d = make_list(get_d)
    eta = make_list(get_eta)
    delta = make_list(get_delta)

    t = d <= lambda_c + delta
    n_c = NP.sum(t)

    if n_c == 0:
        return n_c, None, None

    return n_c, max(eta[t]), max(delta[t]/d[t])



def main():
    default_options = Options()

    argument_parser = make_argument_parser(default_options)
    namespace = argument_parser.parse_args()

    options, A, B = sanitize_input(default_options, namespace)
    n = A.shape[0]
    lambda_c = options.lambda_c

    numpy.random.seed(1)

    t0 = time.time()
    c0 = time.clock()
    rs, labels = solver.execute(options, A, B, lambda_c)
    c1 = time.clock()
    t1 = time.time()


    # output
    n_c, eta_max, delta_max = extract_key_quantities(lambda_c, rs, labels)

    fmt = '{:20s} {:8.2e} {:6d} {:4d} {:8.2e} {:8.2e} {:7.1f} {:8.1f}'
    zero_fmt = '{:20s} {:8.2e} {:6d} {:4d} {:>8s} {:>8s} {:7.1f} {:8.1f}'

    t = t1 - t0
    c = c1 - c0
    filename = options.filename

    if n_c == 0:
        print zero_fmt.format(filename, lambda_c, n, n_c, '--', '--', t, c)
    else:
        print fmt.format( \
                filename, lambda_c, n, n_c, eta_max, delta_max, t, c)



if __name__ == '__main__':
    sys.exit( main() )
